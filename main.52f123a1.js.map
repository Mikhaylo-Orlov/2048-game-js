{"version":3,"sources":["scripts/main.js"],"names":["board","score","document","querySelector","cell","querySelectorAll","button","messageWin","messageLose","messageStart","rows","columns","directionMove","up","down","left","right","beginGame","i","r","c","id","num","updateTile","setRandom","addEventListener","handler","hasEmptyTile","createArrayAllTiles","array","push","findEmptyTile","Math","floor","random","tile","getElementById","innerText","classList","add","value","textContent","remove","e","code","slideLeftRight","slideUpDown","checkIsGameLoss","checkIsGameWon","tileWithoutZero","row","filter","slide","newRow","length","currentArray","newArray","reverse","JSON","stringify","removeEventListener"],"mappings":"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","file":"main.52f123a1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst cell = document.querySelectorAll('.field-cell');\nconst button = document.querySelector('.button');\n\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nconst rows = 4;\nconst columns = 4;\n\nconst directionMove = {\n  up: 'ArrowUp',\n  down: 'ArrowDown',\n  left: 'ArrowLeft',\n  right: 'ArrowRight',\n};\n\nbutton.addEventListener('click', () => {\n  if (button.textContent === 'Start') {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n  } else {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n  }\n\n  score.textContent = '0';\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  beginGame();\n});\n\nlet board;\n\nfunction beginGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  let i = 0;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      cell[i].id = `${r}${c}`;\n\n      const num = board[r][c];\n\n      updateTile(cell[i], num);\n      i++;\n    }\n  }\n\n  setRandom();\n  setRandom();\n  document.addEventListener('keyup', handler);\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createArrayAllTiles() {\n  const array = [];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      array.push(board[r][c]);\n    }\n  }\n\n  return array;\n}\n\nfunction setRandom() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let findEmptyTile = false;\n\n  while (!findEmptyTile) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = Math.random() > 0.9 ? 4 : 2;\n\n      const tile = document.getElementById(`${r}${c}`);\n\n      tile.innerText = `${board[r][c]}`;\n      tile.classList.add(`field-cell--${board[r][c]}`);\n      findEmptyTile = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\nconst handler = (e) => {\n  switch (e.code) {\n    case directionMove.left: {\n      slideLeftRight(true);\n\n      break;\n    }\n\n    case directionMove.right: {\n      slideLeftRight(false);\n\n      break;\n    }\n\n    case directionMove.up: {\n      slideUpDown(true);\n\n      break;\n    }\n\n    case directionMove.down: {\n      slideUpDown(false);\n\n      break;\n    }\n  }\n\n  checkIsGameLoss();\n  checkIsGameWon();\n};\n\nfunction tileWithoutZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = tileWithoutZero(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score.textContent = `${+score.textContent + newRow[i]}`;\n    }\n  }\n\n  newRow = tileWithoutZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeftRight(left) {\n  const currentArray = createArrayAllTiles();\n  let newArray;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    if (left) {\n      row = slide(row);\n      board[r] = row;\n      newArray = createArrayAllTiles();\n    } else {\n      row.reverse();\n      row = slide(row);\n      row.reverse();\n      board[r] = row;\n      newArray = createArrayAllTiles();\n    }\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n\n  if (JSON.stringify(currentArray) !== JSON.stringify(newArray)) {\n    setRandom();\n  }\n}\n\nfunction slideUpDown(up) {\n  const currentArray = createArrayAllTiles();\n  let newArray;\n\n  for (let c = 0; c < columns; c++) {\n    let row = [\n      board[0][c],\n      board[1][c],\n      board[2][c],\n      board[3][c],\n    ];\n\n    if (up) {\n      row = slide(row);\n      newArray = createArrayAllTiles();\n    } else {\n      row.reverse();\n      row = slide(row);\n      row.reverse();\n      newArray = createArrayAllTiles();\n    }\n\n    for (let r = 0; r < columns; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r}${c}`);\n      const number = board[r][c];\n\n      updateTile(tile, number);\n    }\n  }\n\n  if (JSON.stringify(currentArray) !== JSON.stringify(newArray)) {\n    setRandom();\n  }\n};\n\nfunction checkIsGameLoss() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (!board[r][c]) {\n        return;\n      };\n\n      if (r !== 3 && board[r][c] === board[r + 1][c]) {\n        return;\n      };\n\n      if (c !== 3 && board[r][c] === board[r][c + 1]) {\n        return;\n      };\n\n      if (c === 3 && r === 3 && board[r][c] === board[r - 1][c]) {\n        return;\n      }\n\n      if (c === 3 && r === 3 && board[r][c] === board[r][c - 1]) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n  document.removeEventListener('keyup', handler);\n}\n\nfunction checkIsGameWon() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        messageWin.classList.remove('hidden');\n      }\n    }\n  }\n};\n"]}